#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build cudy_tr3000-v1 ponly 24.10 hnat actions.

on:
  workflow_dispatch:
#   schedule:
#     - cron: '0 4 * * *'

env:
  # padavanonly 2410
  PONLY2410_REPO_URL: ${{ secrets.PONLY2410_REPO_URL }}
  CUDY_PONLY2410_REPO_BRANCH: ${{ secrets.CUDY_PONLY2410_REPO_BRANCH }}
  PONLY2410_REPO_PATCH: ${{ secrets.PONLY2410_REPO_PATCH }}
  # cudy tr3000
  CUDY_TR3000_PONLY2410_HOSTNAME: ${{ secrets.CUDY_TR3000_PONLY2410_HOSTNAME }}
  CUDY_TR3000_PONLY2410_PACKAGE: ${{ secrets.CUDY_TR3000_PONLY2410_PACKAGE }}
  CUDY_TR3000_PONLY2410_CONFIG: ${{ secrets.CUDY_TR3000_PONLY2410_CONFIG }}
  # feeds source
  ADD_FEED_SOURCE: ${{ secrets.ADD_FEED_SOURCE }}
  # diy script
  FIRMWARE_DIY_SCRIPT: ${{ secrets.FIRMWARE_DIY_SCRIPT }}
  # NETCORE color theme
  ARGON_THEME_CUDY: ${{ secrets.ARGON_THEME_CUDY }}
  # token
  ACCESS_SHA512SUM: ${{ secrets.ACCESS_SHA512SUM }}
  ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
  # telegram bot
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  # upload options
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: false
  UPLOAD_WENSHUSHU: false
  CACHE_TOOLCHAIN: true
  FIRMWARE_TAG: mt7981b
  DEVICE_NAME: cudy_tr3000-v1
  OUTPUT_FILENAME: padavanonly-2410-ryusan-mt7981b-cudy_tr3000-v1-sysupgrade
  TZ: "Asia/Tokyo"

jobs:
  build:
    runs-on: ubuntu-22.04

    permissions:
      contents: write

    steps:
    - name: Checkout (チェックアウト)
      uses: actions/checkout@main
      with:
        fetch-depth: 0

    - name: Free Disk Space (ハードドライブの空き容量を増やす)
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: Check Server Performance (サーバーのパフォーマンスを確認する)
      run: |
        echo "⚠️警告する⚠️"
        echo "割り当てられたサーバーのパフォーマンスには制限があります。プラグインを選択しすぎる場合は、CPU パフォーマンスに注意してください。"
        echo -e "既知のCPUモデル（降順）: 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "-------------------------CPU 情報---------------------------"
        echo "CPUの物理数  : $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPUコア数    : $(nproc)"
        echo -e "CPUモデル情報:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "------------------------メモリ情報--------------------------"
        echo "メモリの詳細:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "---------------------ハードディスク情報---------------------"
        echo "ハードディスク容量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

#    - name: Combine Disks (ディスクを結合する)
#      uses: easimon/maximize-build-space@master
#      with:
#        swap-size-mb: 1024
#        temp-reserve-mb: 100
#        root-reserve-mb: 1024

    - name: Initialization environment (初期化環境)
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt -yqq update
        sudo -E apt -yqq full-upgrade
        sudo -E apt -yqq autoremove --purge
        sudo -E apt -yqq autoclean
        sudo -E apt -yqq clean
        sudo -E apt -yqq install zip rename dos2unix libfuse-dev
        sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
        sudo -E systemctl daemon-reload
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code (ソースコードのクローン)
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $PONLY2410_REPO_URL -b $CUDY_PONLY2410_REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        ${{ secrets.ADD_FEED_SOURCE }}

    - name: Generate Variables (変数を生成する)
      run: |
        echo "START_DATE=$(date +'%Y%m%d %H%M')" >> $GITHUB_ENV
        SOURCE_REPO="$(echo $PONLY2410_REPO_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV

    - name: Cache Toolchain (キャッシュツールチェーン)
      if: env.CACHE_TOOLCHAIN == 'true'
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: ${{ env.SOURCE_REPO }}-${{ secrets.CUDY_PONLY2410_REPO_BRANCH }}-${{ env.DEVICE_NAME }}
        prefix: ${{ github.workspace }}/openwrt

    - name: Updata & install feeds (アップデートとフィードのインストール)
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a > /dev/null 2>&1
        rm -rf feeds/packages/lang/golang
        git clone https://github.com/sbwml/packages_lang_golang -b 24.x feeds/packages/lang/golang
        ./scripts/feeds install -a > /dev/null 2>&1
        ./scripts/feeds install -a > /dev/null 2>&1

    - name: Load custom configuration (カスタム構成を読み込む)
      run: |
        ${{ secrets.CUDY_TR3000_PONLY2410_CONFIG }}
        mv .config openwrt/.config
        cd openwrt
        ${{ secrets.CUDY_TR3000_PONLY2410_HOSTNAME }}
        ${{ secrets.PONLY2410_REPO_PATCH }}
        ${{ secrets.FIRMWARE_DIY_SCRIPT }}
        ${{ secrets.ARGON_THEME_CUDY }}

    - name: Download package (パッケージをダウンロード)
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware (ファームウェアをコンパイルする)
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Telegram notify when compilation error (コンパイルエラーが発生したときにTelegramを使用して通知する)
      if: steps.compile.outputs.status != 'success' && !cancelled()
      env:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      run: |
        curl -i -X GET "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage?chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&format=markdown&text=⛔%20コンパイルに失敗しました。%20⛔%0A-%20🛜デバイス:%20${{ env.DEVICE_NAME }}%0A-%20🗼ソースコード:%20$SOURCE_REPO%0A-%20🔀ブランチ:%20${{ secrets.CUDY_PONLY2410_REPO_BRANCH }}"

    - name: Organize files (ファイルを整理する)
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        ls | grep -v *sysupgrade.bin | xargs rm -rdf
        mv *sysupgrade.bin $OUTPUT_FILENAME.bin
        sha512sums -q -r -P ${{ secrets.ACCESS_SHA512SUM }} sha512sums $OUTPUT_FILENAME.bin > /dev/null 2>&1
        ${{ secrets.CUDY_TR3000_PONLY2410_PACKAGE }}
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload Firmware To Artifact (Artifactにアップロードする)
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
      uses: actions/upload-artifact@main
      with:
        name: $OUTPUT_FILENAME${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Telegram notification (テレグラム通知)
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_WENSHUSHU == 'true' && !cancelled()
      run: |
        cd openwrt
        curl -fsSL git.io/file-transfer | sh
        ./transfer wss -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wenshushu.log
        WENSHUSHU=$(cat wenshushu.log | grep 'Download Link:' | cut -d' ' -f3-)
        echo "WENSHUSHU=$WENSHUSHU" >> $GITHUB_ENV
        curl -i -X GET "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage?chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&format=markdown&text=✅%20ファームウェアが正常にコンパイルされました。%20✅%0A-%20🛜デバイス:%20${{ env.DEVICE_NAME }}%0A-%20🗼ソースコード:%20$SOURCE_REPO%0A-%20🔀ブランチ:%20${{ secrets.CUDY_PONLY2410_REPO_BRANCH }}.%0A-%20📦ファームウェア名前:%20$OUTPUT_FILENAME${{ env.FILE_DATE }}%0A-%20📥ウェンおじさん:%20$WENSHUSHU"

    - name: Generate Release Tag (タグを生成する)
      run: |
        RELEASE_TAG="$FIRMWARE_TAG-$DEVICE_NAME"
        echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV

    - name: Upload Firmware To Release (ファームウェアをアップロードする)
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
      uses: ncipollo/release-action@v1
      with:
        name: $FIRMWARE_TAG-$DEVICE_NAME-${{ env.DATE }}
        allowUpdates: false
        tag: ${{ env.RELEASE_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          **このPadavanOnlyファームウェアはルータ${{ env.FIRMWARE_TAG }}専用です.**
          ### 📒 PadavanOnlyの公式メインラインソースコードに基づいてコンパイルされたファームウェア.
          - これは、ハードウェアNATアクセラレーションをサポートする${{ env.DEVICE_NAME }}のクローズドソースドライバファームウェアです。.
          - 🛜 デ バ イ ス: ${{ env.DEVICE_NAME }}
          - 🗼 ソースコード: ${{ secrets.PONLY2410_REPO_URL }}
          - 🔀 ブ ラ ン チ: ${{ secrets.CUDY_PONLY2410_REPO_BRANCH }}
          - 🌐 ア ド レ ス: 192.168.6.1 または immortalwrt.lan
          - 🔑 パスワード : なし
          ### ⚠️ 警告する ⚠️
          - ‼️現在のリポジトリによってコンパイルされたファームウェアはすべて非公開でカスタマイズされています。
          - ⛔️強制フラッシュ⛔️によってデバイスが損傷した場合、このリポジトリはデバイスの損傷について一切責任を負いません。
        
    - name: Delete old workflow runs (古いワークフロー実行を削除する)
      uses: Mattraks/delete-workflow-runs@main
      with:
        token: ${{ secrets.ACCESS_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 7
        keep_minimum_runs: 3
        
    - name: Delete Old Releases (古いリリースを削除する)
      uses: dev-drprasad/delete-older-releases@master
      with:
        keep_latest: 15
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
